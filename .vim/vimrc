scriptencoding utf-8

set encoding=utf-8

" 最小限？の設定の vimrc

" 改行コードの設定
set fileformats=unix,dos,mac

" https://github.com/vim-jp/issues/issues/1186
set fileencodings=utf-8,iso-2022-jp,euc-jp,cp932

" 折返しのインデント
let g:vim_indent_cont = 0

" from https://twitter.com/hrsh7th/status/1206597079134437378
let $MYVIMRC = resolve($MYVIMRC)

set autoindent          " 改行時に前の行のインデントを維持する
" set smartindent         " 改行時に入力された行の末尾に合わせて次の行のインデントを増減
set shiftround          " インデント幅を必ず shiftwidth の倍数にする
set hlsearch            " 検索文字列をハイライトする
set incsearch           " 文字を入力されるたびに検索を実行する
set scrolloff=5         " 5行開けてスクロールできるようにする
set visualbell t_vb=    " ビープ音すべてを無効にする
set noerrorbells        " エラーメッセージの表示時にビープ音を鳴らさない
set history=3000         " 検索、置換、コマンド... の履歴を300にする(default: 50)
set showtabline=2       " 常にタブを表示
set ignorecase          " 大文字小文字を区別しない
set smartcase           " 大文字が入らない限り、大文字小文字は区別しない
set cmdheight=2         " 2 で慣れてしまったため
set timeoutlen=480      " マッピングの待機時間
set nrformats-=octal    " 07 で CTRL-A しても、010 にならないようにする
set signcolumn=yes      " 常に表示
set completeslash=slash " 補完時に使用する slash
set nostartofline       " <C-v>で選択しているときに、上下移動しても、行頭に行かないようにする
set autoread            " Vim の外でファイルを変更した時、自動で読み込む
set splitright          " 縦分割した時、カレントウィンドウの右に作成する
set nosplitbelow        " 横分割した時、カレントウィンドウの上に作成する
" set ambiwidth=double    " 記号を正しく表示
set ambiwidth=single

" menuone:  候補が1つでも表示
" popup:    info を popup で表示
" noselect: 自動で候補を表示しない
" noinsert: 自動で候補を挿入しない
" set completeopt=menuone,noselect,noinsert
set completeopt=menuone,noselect
" 補完候補の最大表示数
set pumheight=15

set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" syntax highlight
" syntax enable と syntax on の違いを理解する (:help :syntax-on)
" on: 既存の色の設定を上書きする
" enable: まだ、設定されていない色の設定のみ適用する
syntax enable

" plugin ファイルタイプ別プラグインを有効化
" indent ファイルタイプごとのインデントを有効化
" ファイルタイプの自動検出
filetype plugin indent on

" <BS>, <Del>, <CTRL-W>, <CTRL-U> で削除できるものを設定
"   indent  : 行頭の空白
"   eol     : 改行(行の連結が可能)
"   start   : 挿入モード開始位置より手前の文字
set backspace=indent,eol,start

" Windows の場合、 @* と @+ は同じになる
if has('win32')
  set clipboard=unnamed
else
  " https://pocke.hatenablog.com/entry/2014/10/26/145646
  " reset
  set clipboard&
  set clipboard^=unnamedplus
endif

" 余白文字を指定
"   vert: 垂直分割の区切り文字
"   fold: 折畳の余白
"   diff: diffの余白
" set fillchars=vert:\ ,fold:\ ,diff:\ 
set fillchars=vert:\|,fold:\ ,diff:\ 

" バックアップファイル(~)を作成しない(defaut: off)
set nobackup
set nowritebackup

" スワップファイル(.swp)を作成しない
set noswapfile
set updatecount=0

" cmdline の補完設定
" ステータスラインに候補を表示
set wildmenu

" Tab 1回目:  共通部分まで補完し、候補リストを表示
" Tab 2回目~: 候補を完全に補完
set wildmode=longest:full,list:full

" cmdline から cmdline-window へ移動
set cedit=\<C-k>

" listchars (不可視文字を表示する) "
set list
set listchars=
" 改行記号
set listchars+=eol:↲
" タブ
set listchars+=tab:»\ 
" 右が省略されている
set listchars+=extends:>
" 行をまたいでいる
set listchars+=precedes:<
" 行末のスペース
set listchars+=trail:\ 

" 補完のメッセージを表示しない
set shortmess+=c

" diff の設定
" https://qiita.com/takaakikasai/items/3d4f8a4867364a46dfa3
" internal: 内部diffライブラリを設定する
" filler: 片方にしか無い行を埋める
" algorithm:histogram: histogram差分アルゴリズム を使用する
" indent-heuristic: 内部 diff のインデントヒューリスティック？を使う
set diffopt=internal,filler,algorithm:histogram,indent-heuristic
" 垂直に分割する
set diffopt+=vertical

" " fold 折畳
" function! MyFoldText() abort "
"     let marker_start = strpart(&foldmarker, 0, 3)
"     let line = getline(v:foldstart)
"     let lcnt = v:foldend - v:foldstart
"
"     " TODO: 4桁固定ではなく、レベルごとに設定とかできないのかな...
"     let lcnt =  printf('%4d', lcnt)
"
"     let l:foldtext = ''
"     let l:foldtext.= lcnt.'L'
"     let l:foldtext.= ' '
"     let l:foldtext.= line
"     return l:foldtext
" endfunction
"
" set foldtext=MyFoldText()

" from kaoriya's vimrc
" マルチバイト文字の間でも改行できるようにする(autoindentが有効の場合いる)
set formatoptions+=m
" マルチバイト文字の間で行連結した時、空白を入れない
set formatoptions+=M

" from #vimtips_ac https://twitter.com/Takutakku/status/1207676964225597441
" 結合時、コメントを削除する
set formatoptions+=j

set formatoptions-=t

" terminal
" prefix
set termwinkey=<C-w>

set noshowmode
set laststatus=2

" パスとして = を含めない (set rtp=~/path/to/file で補完できるようにする)
set isfname-==
" パスとして ' を含めない (set rtp='~/path/to/file' で補完できるようにする)
set isfname-='
" @,48-57,/,.,-,_,+,,,#,$,%,~
" @,48-57,/,.,-,_,+,,,#,$,%,~,'

" 矩形選択の時、文字がない箇所も選択できるようにする
set virtualedit=block

" gf とかで相対パスを検索するときの基準となるディレクトリのリスト
set path=
" カレントファイルからの相対パス
set path+=.
" カレントディレクトリからの相対パス
set path+=,,
" カレントディレクトリから上に探しに行く
set path+=**

set foldlevelstart=99

" 表示できるところまで表示する
set display=lastline

" マクロの実行が終わったら、描画する (高速化)
set lazyredraw

" " よく間違える文字をハイライト
" let s:misspell = [
" \   'pritn',
" \   'funciton',
" \   'fmg',
" \   'Prinln',
" \   'improt',
" \]
" exe printf('match Error /%s/', join(s:misspell, '\|'))


" .,w,b,u,t,i
" include
set complete-=i
" tag
set complete-=t
" unload buffer
set complete-=u

" カーソルの形を変更する
" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" https://github.com/tyru/config/commit/993b57acd84a4996990771ae293625133f1b2ed8#diff-054bd431f12b7b2850de6d50d6e0ce17R864
" https://qiita.com/Linda_pp/items/9e0c94eb82b18071db34
" if has('vim_starting')
"     " 挿入モード時に非点滅の縦棒タイプのカーソル
"     let &t_SI .= "\e[6 q"
"     " ノーマルモード時に非点滅のブロックタイプのカーソル
"     let &t_EI .= "\e[2 q"
"     " 置換モード時に非点滅の下線タイプのカーソル
"     let &t_SR .= "\e[4 q"
" endif

" 
" set breakindent
" let &showbreak=repeat(' ', 3)
" set linebreak

if !has('gui_running')
  set termguicolors
endif

set mouse+=n

" lua ハイライトを ON
" let g:vimsyn_embed = 'l'

" :h file-searching
set tags=./tags;/

set updatetime=500

" 
" set showtabline=0

" set cursorline


if executable("rg")
  " set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --glob\ "!*/.mypy_cache/*"\ "!.node_modules/*"\ "!tags*"
  " set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --glob\ '!tags*'

  " --no-heading はデフォルトでONだから、いらない
  set grepprg=rg\ --vimgrep\ --smart-case\ --glob\ '!tags*'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" " 自動でならないようにする
" set winfixheight

set cursorline


nnoremap <C-z> <Nop>

" " insert mode で細かく undo できるようにする
" inoremap <Del> <C-g>u<Del>
" inoremap <C-w> <C-g>u<C-w>
" inoremap <C-u> <C-g>u<C-u>

" like emacs
inoremap <C-a> <C-o>_
inoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-b> <Left>

" 選択範囲で . を実行
xnoremap . :normal! .<CR>

" シンボリックリンクの先に移動する
nnoremap cd :<C-u>exec 'lcd ' .. resolve(expand('%:p:h')) \| pwd<CR>

nnoremap <silent><expr> <Space>vs. (&filetype ==# 'lua' ? ':<C-u>luafile %<CR>' : ':<C-u>source %<CR>')

" update は変更があったときのみ保存するコマンド
nnoremap <Space>w :<C-u>update<CR>
nnoremap <Space>W :<C-u>update!<CR>
nnoremap <Space>q :<C-u>quit<CR>
nnoremap <Space>Q :<C-u>quit!<CR>

" window 操作
nnoremap s <Nop>

nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l

nnoremap sH <C-w>H
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L

nnoremap sn :<C-u>new<CR>
nnoremap sp :<C-u>split<CR>
nnoremap sv :<C-u>vsplit<CR>

" カレントウィンドウを新規タブで開く
nnoremap st <C-w>T

" 新規タブ
nnoremap so :<C-u>tabedit<CR>

" タブ間の移動
nnoremap gt <Nop>
nnoremap gT <Nop>
nnoremap <C-l> gt
nnoremap <C-h> gT

" 先頭と末尾
nnoremap <Space>h ^
xnoremap <Space>h ^
nnoremap <Space>l $
xnoremap <Space>l $h

" 上下の空白に移動
" https://twitter.com/Linda_pp/status/1108692192837533696
nnoremap <silent> <C-j> :<C-u>keepjumps normal! '}<CR>
nnoremap <silent> <C-k> :<C-u>keepjumps normal! '{<CR>
xnoremap <silent> <C-j> '}
xnoremap <silent> <C-k> '{

" 見た目通りに移動
nnoremap j gj
nnoremap k gk

" 中央にする
nnoremap G Gzz

" カーソル位置から行末までコピー
nnoremap Y y$

" 全行コピー
nnoremap <Space>ay :<C-u>%y<CR>

" 最後にコピーしたテキストを貼り付ける
nnoremap <Space>p "0p
xnoremap <Space>p "0p

" 直前に実行したマクロを実行する
nnoremap Q @@

" ハイライトの消去
nnoremap <Esc><Esc> :<C-u>noh<CR>

" <C-]> で Job mode に移行
tnoremap <Esc> <C-\><C-n>

" コマンドラインで emacs っぽく
cnoremap <C-a> <Home>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" / -> \/ にする
cnoremap <expr> / getcmdtype() ==# '/' ? '\/' : '/'

" :h magic
" markonm/traces.vim のバグ？で、 set incsearch が消えるため
nnoremap / :<C-u>set incsearch<CR>/\v

" クリップボード内の文字列をそのまま検索
nnoremap <Space>/ /\V<C-r>+<CR>

" 全行で置換
nnoremap <Space>s<Space> :<C-u>%s///g<Left><Left>

" カレントバッファを検索
nnoremap <Space>gg :vimgrep // %:p<Left><Left><Left><Left><Left>

" help
xnoremap <A-h> "hy:help <C-r>h<CR>
nnoremap <A-h> :h 
xnoremap K     <Nop>

" クリップボードの貼り付け
inoremap <C-r><C-r> <C-r>+
cnoremap <C-o>      <C-r>+

" tyru さんのマッピング
" https://github.com/tyru/config/blob/master/home/volt/rc/vimrc-only/vimrc.vim#L618
inoremap <C-l><C-l> <C-x><C-l>
inoremap <C-l><C-n> <C-x><C-n>
inoremap <C-l><C-k> <C-x><C-k>
inoremap <C-l><C-t> <C-x><C-t>
inoremap <C-l><C-i> <C-x><C-i>
inoremap <C-l><C-]> <C-x><C-]>
inoremap <C-l><C-f> <C-x><C-f>
inoremap <C-l><C-d> <C-x><C-d>
inoremap <C-l><C-v> <C-x><C-v>
inoremap <C-l><C-u> <C-x><C-u>
inoremap <C-l><C-o> <C-x><C-o>
inoremap <C-l><C-s> <C-x><C-s>
inoremap <C-l><C-p> <C-x><C-p>

" plugins.vim を開く
nnoremap <Space>v, :<C-u>call vimrc#drop_or_tabedit(g:plug_script)<CR>
nnoremap <Space>v. :<C-u>execute 'split ' .. g:plug_script<CR>

" new tempfile
nnoremap sf :<C-u>call <SID>new_tmp_file()<CR>
function! s:new_tmp_file() abort
  let l:ft = input('FileType: ', '', 'filetype')
  if l:ft ==# ''
    echo 'Cancel.'
    return
  endif

  " もし空ならそのバッファを使う
  let l:cmd = line('$') ==# 1 && getline(1) && !&modified ? 'e' : 'new'
  exec l:cmd .. ' '.. tempname()
  exec 'setfiletype ' .. l:ft
endfunction

" 再描画
nnoremap <Space>e :<C-u>call <SID>reopen()<CR>
function! s:reopen() abort
  let l:winview = winsaveview()
  e!
  call winrestview(l:winview)
endfunction

" quickfix をトグル
nnoremap <A-q> :<C-u>call <SID>toggle_quickfix()<CR>
function! s:toggle_quickfix() abort
  let l:is_show_qf = v:false
  for l:win in nvim_tabpage_list_wins(0)
    let l:buf = nvim_win_get_buf(l:win)
    if nvim_buf_get_option(l:buf, 'buftype') ==# 'quickfix'
      let l:is_show_qf = v:true
      break
    endif
  endfor

  if l:is_show_qf
    if &buftype ==# 'quickfix'
      exec 'wincmd p'
    endif
    exec 'cclose'
  else
    exec 'botright copen'
  endif
endfunction

nnoremap [q :<C-u>cprev<CR>
nnoremap ]q :<C-u>cnext<CR>
" 先頭
nnoremap [[ :<C-u>cfirst<CR>

" toggle option
function! s:toggle_option(key, opt) abort
  exec printf('nnoremap %s :<C-u>setlocal %s!<CR> \| :<C-u>set %s?<CR>', a:key, a:opt, a:opt)
endfunction
call s:toggle_option('<F2>', 'wrap')
call s:toggle_option('<F3>', 'readonly')

function! s:ripgrep(text) abort
  " let l:regex = input("Grep string> ")
  " " let l:input = input(printf("Grep string> "))
  " if empty(l:regex)
  "   call nvim_echo([['Calcel.', 'WarningMsg']], v:false, [])
  "   return
  " endif

  let l:cwd = input("cwd> ", getcwd(), 'dir')
  if !isdirectory(l:cwd)
    call nvim_echo([[printf('Not exists "%s"', l:cwd), 'WarningMsg']], v:false, [])
    return
  endif

  let l:save_cwd = getcwd()
  try
    noautocmd execute 'lcd ' .. l:cwd
    " ! をつけると、最初のマッチにジャンプしなくなる
    execute printf("silent grep! '%s'", a:text)
  catch /.*/
    noautocmd execute 'lcd ' .. l:save_cwd
  endtry
endfunction

command! -nargs=1 Rg call <SID>ripgrep(<q-args>)
nnoremap <Space>fg :<C-u>Rg 


" nnoremap <Space>d. :<C-u>call vimrc#drop_or_tabedit('~/dict')<CR>

" カレントバッファのパスを入力
cnoremap <C-x> <C-r>%

nnoremap x "_x

" 便利
onoremap ( t(
onoremap ) t)
onoremap [ t[
onoremap ] t]
onoremap { t{
onoremap } t}
onoremap " t"
onoremap ' t'
onoremap ` t`

nnoremap <Space>dt :<C-u>windo diffthis<CR>
nnoremap <Space>do :<C-u>windo diffoff<CR>

nnoremap ; g;zz

nnoremap sq :<C-u>tabo<CR>

nnoremap sc :<C-u>tabclose<CR>
" nnoremap sl :<C-u>only<CR>

" let s:float_tmp = {}
" let s:float_tmp.buf = v:null
" let s:float_tmp.win = v:null
" 
" " function! s:glow_width() abort
" "   " 横幅を広げる
" "   let l:len = len(line('.'))
" "   echo l:len
" "   let l:width = nvim_win_get_config(s:float_tmp.win).width
" "   if l:len > l:width
" "     call nvim_win_set_config(s:float_tmp.win, {
" "     \ 'width': l:len - l:width
" "     \})
" "   endif
" " endfunction
" 
" function! s:hide_tiknot() abort
"   call nvim_win_hide(s:float_tmp.win)
" endfunction
" 
" function! s:open_tiknot() abort
"   " カーソルの近くに使い捨てのフローティングウィンドウを表示する
"   if s:float_tmp.buf ==# v:null
"     let s:float_tmp.buf = nvim_create_buf(v:false, v:true)
"   endif
" 
"   " cursor って使えないの？
"   let s:float_tmp.win = nvim_open_win(s:float_tmp.buf, v:true, {
"  \ 'relative': 'cursor',
"  \ 'width': 40,
"  \ 'height': 15,
"  \ 'col': 10,
"  \ 'row': 3,
"  \ 'focusable': v:true,
"  \ 'style': 'minimal',
"  \ 'border': 'shadow',
"  \})
" 
"   setlocal winhl=Normal:TikNotNormal,EndOfBuffer:TikNotNormal
" 
"   setlocal cursorline
"   setlocal number
" 
"   nnoremap <buffer> q  :<C-u>call <SID>hide_tiknot()<CR>
"   nnoremap <buffer> si :<C-u>call <SID>hide_tiknot()<CR>
" 
"   augroup TikNot
"     autocmd!
"     autocmd WinLeave <buffer> call <SID>hide_tiknot()
"   augroup END
" endfunction
" nnoremap si :<C-u>call <SID>open_tiknot()<CR>

" 現在の位置に対応する ) にジャンプ
noremap <Space>a) ])
noremap <Space>a] ]]
noremap <Space>a} ]}

" vnoremap m] i]o``
" vnoremap m( i)``
" vnoremap m{ i}``
" vnoremap m[ i]``
"
" nnoremap dm] vi]o``d
" nnoremap dm( vi)``d
" nnoremap dm{ vi}``d
" nnoremap dm[ vi]``d
"
" nnoremap cm] vi]o``c
" nnoremap cm( vi)``c
" nnoremap cm{ vi}``c
" nnoremap cm[ vi]``c


" 選択場所を新しいタブで開く
nnoremap <silent> <Space>at  :<C-u>tabnew<Cr>]p:call deletebufline('%', 1, 1)<Cr>
vnoremap <silent> <Space>at y:<C-u>tabnew<Cr>]p:call deletebufline('%', 1, 1)<Cr>


